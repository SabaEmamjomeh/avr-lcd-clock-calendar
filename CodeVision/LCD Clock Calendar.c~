
#include <mega32a.h>
#include <i2c.h>
#include <ds1307.h>
#include <1wire.h>
#include <ds18b20.h>
#include <alcd.h>
#include <delay.h>
#include <math.h>
#include <stdio.h>

// Declare your global variables here
float Temp;
char lcd_buff[16];
unsigned char Hour, Minute, Second = 0;
eeprom unsigned char Year_century;
unsigned char Year, Month, Day, Weekday = 0;
unsigned int sYear = 0;
unsigned char sMonth, sDay = 0;
unsigned char menu_selector = 0;
flash char degreeSymbol[8] = 
{
0b000110,
0b001001,
0b001001,
0b000110,
0b000000,
0b000000,
0b000000,
0b000000
};

// Declare your global functions
void time_date_functions();
int isLeapYear(int _year, int _type);
void main_loop();
void Georgian2Solar(int gYear, char gMonth, char gDay, unsigned int* sYear, char* sMonth, char* sDay);
void define_char(char flash *pc, char char_code);

// Timer2 overflow interrupt service routine
interrupt [TIM2_OVF] void timer2_ovf_isr(void)
{
    if (Second >= 0 && Second <= 58)
    {
        Second++;  
    }
    else if (Second >= 59)
    {
        Second = 0;
        Minute++;
        if (Minute > 59)
        {
            Minute = 0;
            Hour++;
            if (Hour > 23)
            {
                Hour = 0;
                Day++;
                Weekday++;
            }
        }
    }
}

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In 
DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=P Bit1=P Bit0=P 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);

// Port B initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0xD8;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: TOSC1 pin
// Clock value: PCK2/128
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=1<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (0<<CS21) | (1<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Bit-Banged I2C Bus initialization
// I2C Port: PORTC
// I2C SDA bit: 1
// I2C SCL bit: 0
// Bit Rate: 100 kHz
// Note: I2C settings are specified in the
// Project|Configure|C Compiler|Libraries|I2C menu.
i2c_init();

// DS1307 Real Time Clock initialization
// Square wave output on pin SQW/OUT: Off
// SQW/OUT pin state: 0
rtc_init(0,0,0);

// 1 Wire Bus initialization
// 1 Wire Data port: PORTB
// 1 Wire Data bit: 0
// Note: 1 Wire port settings are specified in the
// Project|Configure|C Compiler|Libraries|1 Wire menu.
w1_init();

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTB Bit 1
// RD - PORTB Bit 2
// EN - PORTB Bit 3
// D4 - PORTB Bit 4
// D5 - PORTB Bit 5
// D6 - PORTB Bit 6
// D7 - PORTB Bit 7
// Characters/line: 16
lcd_init(16);
define_char(degreeSymbol, 0);
lcd_clear();

// Global enable interrupts
#asm("sei")

rtc_get_time(&Hour, &Minute, &Second);
rtc_get_date(&Weekday, &Day, &Month, &Year);

if (Year_century == 0) Year_century = 20;
main_loop();
   
}

void main_loop()
{
    while(1)
    {             
        time_date_functions(); 
        
        
        if (menu_selector == 0)
        {       
            Temp = ds18b20_temperature(0);   
            
            if (Second % 10 < 5)
            {
                sprintf(lcd_buff, "%.4i/%.2i/%.2i ", (Year_century * 100) + Year, Month, Day); 
            }
            else
            {
                Georgian2Solar((Year_century * 100) + Year, Month, Day, &sYear, &sMonth, &sDay);
                sprintf(lcd_buff, "%.4i/%.2i/%.2i ", sYear, sMonth, sDay);
            }
            lcd_gotoxy(0, 0);
            lcd_puts(lcd_buff); 

            switch(Weekday)
            {
                case 1:
                    sprintf(lcd_buff, "SUN"); 
                    break;
                case 2:
                    sprintf(lcd_buff, "MON"); 
                    break;
                case 3:
                    sprintf(lcd_buff, "TUE"); 
                    break;             
                case 4:
                    sprintf(lcd_buff, "WED");   
                    break;            
                case 5:
                    sprintf(lcd_buff, "THU"); 
                    break;             
                case 6:
                    sprintf(lcd_buff, "FRI");     
                    break;        
                case 7:
                    sprintf(lcd_buff, "SAT");  
                    break;
            } 
            lcd_gotoxy(13, 0);        
            lcd_puts(lcd_buff);
            sprintf(lcd_buff, "%.2i:%.2i:%.2i %.1f", Hour, Minute, Second, Temp);   
            lcd_gotoxy(0, 1);
            lcd_puts(lcd_buff);
            lcd_putchar(0); 
            lcd_puts("C  ");
        }
        
    }    
}

void time_date_functions()
{
    if (menu_selector == 0)
    {
        if (Weekday == 0 || Weekday > 7) Weekday = 1; 
        if (Day == 0) Day = 1;
        if ((Day > 31) && (Month == 1 || Month == 3 || Month == 5 || Month == 7 || Month == 8 || Month == 10 || Month == 12))
        {
            Day = 1;
            Month++;
        }
        if ((Day > 30) && (Month == 4 || Month == 6 || Month == 9 || Month == 11))
        {
            Day = 1;
            Month++;
        } 
        if (Day > 28 && Month == 2 && isLeapYear((Year_century * 100) + Year, 1) == 0)
        {
            Day = 1;
            Month++;        
        }    
        if (Month == 0) Month = 1;
        if (Month > 12)
        {
            Month = 1;
            Year++;
        }
        if (Year > 99)
        {
            Year = 0;     
            Year_century++;
        }
        if (Year_century > 99)
        {
            Year = 0;     
            Year_century = 0;
        }        
    }    
}


int isLeapYear(int _year, int _type)
{
    switch(_type)
    {
        case 1:
            if (_year % 4 == 0) return 1; else return 0; 
            if ((_year % 100 == 0) && (_year % 400 == 0)) return 1; else return 0;    
            break;
        case 2:
            if (_year % 4 == 3) return 1; else return 0;       
            break;
    }
} 

void Georgian2Solar(int gYear, char gMonth, char gDay, unsigned int* sYear, char* sMonth, char* sDay)
{
    float s, r;
    int m; 
    long sa, ss; 
    int ma, ro;    
    
    s = gYear - 1; 
    m = gMonth - 1; 
    r = (s * 365.25) + gDay;
    
    if (gYear % 4 == 0)
    {
        switch(m)
        {  
            case 1:
                r += 31; break;
            case 2:
                r += 60; break;
            case 3:
                r += 91; break;
            case 4:
                r += 121; break;
            case 5:
                r += 152; break;
            case 6:
                r += 182; break;
            case 7:
                r += 213; break;
            case 8:
                r += 244; break;
            case 9:
                r += 274; break;
            case 10:
                r += 305; break;
            case 11:
                r += 335; break;
        }
    }
    else 
    {
        switch(m)
        {  
            case 1:
                r += 31; break;
            case 2:
                r += 59; break;
            case 3:
                r += 90; break;
            case 4:
                r += 120; break;
            case 5:
                r += 151; break;
            case 6:
                r += 181; break;
            case 7:
                r += 212; break;
            case 8:
                r += 243; break;
            case 9:
                r += 273; break;
            case 10:
                r += 304; break;
            case 11:
                r += 334; break;
        }
    }
    r -= 226899;
    sa = (r / 365.25) + 1;
    ss = r / 365.25;
    r -= (ss * 365.25) + 0.25;
    if (sa % 4 == 3) r += 1;
    if (r >= 336) {ma = 12; ro = r - 336;}
    else if (r >= 306) {ma = 11; ro = r - 306;}
    else if (r >= 276) {ma = 10; ro = r - 276;}
    else if (r >= 246) {ma = 9; ro = r - 246;}
    else if (r >= 216) {ma = 8; ro = r - 216;}
    else if (r >= 186) {ma = 7; ro = r - 186;}
    else if (r >= 155) {ma = 6; ro = r - 155;}
    else if (r >= 124) {ma = 5; ro = r - 124;}
    else if (r >= 93) {ma = 4; ro = r - 93;}
    else if (r >= 62) {ma = 3; ro = r - 62;}
    else if (r >= 31) {ma = 2; ro = r - 31;}
    else if (r > 0) {ma = 1; ro = r;}
    else if (r == 0)
    {
        if (sa % 4 != 0) {sa -= 1; ma = 12; ro = 29;}
        else {sa -= 1; ma = 12; ro = 30;}      
    }
    if (ro < 1)
    {
        switch(ma)
        {
            case 1: 
                sa -= 1; ma = 12;
                if (isLeapYear(sa, 2) == 1) ro = 30; else ro = 29;
                break;
            case 2:
                ma = 1; ro = 31; break;
            case 3:
                ma = 2; ro = 31; break;
            case 4:
                ma = 3; ro = 31; break;                
            case 5:
                ma = 4; ro = 31; break;                
            case 6:
                ma = 5; ro = 31; break;        
            case 7:
                ma = 6; ro = 31; break;                
            case 8:
                ma = 7; ro = 30; break;                
            case 9:
                ma = 8; ro = 30; break;                
            case 10:
                ma = 9; ro = 30; break;                
            case 11:
                ma = 10; ro = 30; break;                
            case 12:
                ma = 11; ro = 30; break;                
        }
    } 
    *sYear = sa; *sMonth = ma; *sDay = ro;
    
    // This function has not been optimized to make understanding easier.
}


void define_char(char flash *pc, char char_code)
{
    char i, a;
    a = (char_code << 3) | 0x40;
    for (i = 0; i < 8; i++) lcd_write_byte(a++, *pc++);
}